import JSZip from 'jszip';
/**
 * @name 用连接下载文件
 * @description 连接可以是base64（data:xxx=）、http连接、绝对连接
 * @param {string} mime 传了就会和Blob.type比对，不对就报错
 * * base64字符部分浏览器不支持
 * * 只是简略校验了文件类型
 */
function link2file({
  src,
  name,
  mime,
}: {
  src: string;
  name: string;
  mime?: string;
}) {
  return new Promise<File>((resolve, reject) => {
    if (typeof src === 'string') {
      if (/^data:.+$/.test(src) || /^(https?:\/\/|\/)/i.test(src)) {
        fetch(src)
          .then((res) => {
            if (!res.ok || !(res.status >= 200 && res.status < 300)) {
              reject(new Error('reject at status ' + res.statusText));
            } else {
              return res
                .blob()
                .then((blob) => {
                  if (!mime) return blob;
                  if (blob.type === mime) return blob;
                  reject(new Error(`unexpected file type:${blob.type}`));
                })
                .catch(reject);
            }
          })
          .then((blob) => blob && resolve(new File([blob], name)))
          .catch(reject);
      } else {
        reject(new Error("parameter.src isn't a correct link"));
      }
    } else {
      reject(new Error('parameter.src must be a string'));
    }
  });
}

/**
 * @name base64转File
 * @description 文件尺寸会比标准的大一点
 */
function base642File(urlData: string, filename = 'base64') {
  return new Promise<File>((resolve) => {
    const arr = urlData.split(',');
    const type = arr[0].match(/:(.*?);/)[1];
    const extension = type.split('/')[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    resolve(new File([u8arr], `${filename}.${extension}`));
  });
}

/**
 * @name 文件转base64字符串
 */
function file2base64(file: Blob) {
  return new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
  });
}

/**
 * @name 下载文件
 */
function dowloadFile(source: Blob | MediaSource, download: string) {
  return new Promise<{ href: string; a: HTMLAnchorElement }>((resolve) => {
    const href = URL.createObjectURL(source);
    const a = document.createElement('a');
    a.href = href;
    a.style.display = 'none';
    a.download = download;
    document.body.appendChild(a);
    resolve({ a, href });
  })
    .then(({ a, href }) => {
      a.click();
      return { a, href };
    })
    .then(({ a, href }) => {
      URL.revokeObjectURL(href);
      document.body.removeChild(a);
    });
}

/**
 * @name 读取zip文件，返回文件列表
 * @param {Blob | string } source 二进制或者文件的字符串内容
 * @param {function} filter 文件筛选函数，已经过滤了文件夹。默认全部返回
 */
function readZIP(
  source: Blob | string,
  filter: (
    relativePath: string,
    file: JSZip.JSZipObject,
    /**
     * @name 缓存的文件序号
     */
    index: number,
  ) => boolean = () => true,
) {
  return new Promise<File[]>(async (resolve, reject) => {
    const zip = new JSZip();
    const data = await zip.loadAsync(source).catch(reject);
    if (!data) return;
    const objects: JSZip.JSZipObject[] = [];
    let index = 0;
    data.forEach((relativePath, file) => {
      if (file.dir) return;
      // 过滤 mac os 缓存文件
      if (relativePath.toUpperCase().startsWith('__MACOSX')) return;
      if (file.name.endsWith('.DS_Store')) return;
      ++index;
      if (filter(relativePath, file, index - 1)) {
        objects.push(file);
      }
    });
    const files = await Promise.series(
      objects.map(
        (file) => () =>
          zip
            .file(file.name)
            .async('blob')
            .then((blob) => new File([blob], file.name)),
      ),
    ).catch(reject);
    if (!files) return;
    resolve(files);
  });
}

/**
 * @name
 * @description 可以把svg链接（下载）、文本（完整xml）、svg文件转成base64
 * @return {*}
 */
function svg2imgSrc() {
  const serializer = new XMLSerializer();
  const svg = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="none" version="1.1" width="32" height="32" viewBox="0 0 32 32"><defs><clipPath id="master_svg0_6054_15291"><rect x="0" y="0" width="32" height="32" rx="0"/></clipPath></defs><g style="mix-blend-mode:passthrough" clip-path="url(#master_svg0_6054_15291)"><g style="mix-blend-mode:passthrough"><path d="M18,20.8808Q18.207,20.8477,18.412399999999998,20.8055Q18.617800000000003,20.7633,18.8211,20.7121Q19.0244,20.6609,19.2252,20.6007Q19.426099999999998,20.5406,19.6241,20.4716Q19.8221,20.4027,20.0169,20.3251Q20.2116,20.2474,20.4028,20.1613Q20.593899999999998,20.0752,20.781100000000002,19.9807Q20.9683,19.8862,21.1511,19.7836Q21.3339,19.6809,21.512,19.5703Q21.6901,19.4597,21.8632,19.3413Q22.0362,19.223,22.2039,19.0971Q22.3716,18.9712,22.5335,18.838Q22.6955,18.7049,22.851399999999998,18.5647Q23.0073,18.4245,23.1569,18.2776Q23.3065,18.1307,23.4494,17.9773Q23.5924,17.823900000000002,23.7284,17.6644Q23.8645,17.5049,23.9933,17.3395Q24.1222,17.1741,24.2437,17.0032Q24.3651,16.8323,24.4789,16.6562Q24.5927,16.4801,24.6986,16.2992Q24.8046,16.118299999999998,24.9024,15.9328Q25.0002,15.7474,25.0898,15.5578Q25.1793,15.3682,25.2604,15.1749Q25.3415,14.9815,25.414,14.7848Q25.4865,14.5881,25.5503,14.3883Q25.614,14.1886,25.6689,13.9863Q25.7238,13.7839,25.7697,13.5793Q25.8155,13.3747,25.8524,13.1683Q25.8892,12.9619,25.9169,12.7541Q25.9445,12.5463,25.963,12.3374Q25.9815,12.1286,25.9907,11.91912Q26,11.70966,26,11.5Q26,11.26679,25.9886,11.03386Q25.9771,10.80093,25.9543,10.56884Q25.9314,10.33675,25.8972,10.10606Q25.863,9.87537,25.8175,9.64664Q25.772,9.41791,25.7153,9.191690000000001Q25.6586,8.96547,25.5909,8.7423Q25.5232,8.51913,25.4447,8.29955Q25.3661,8.07997,25.2769,7.86451Q25.1876,7.64905,25.0879,7.43823Q24.9882,7.22741,24.8782,7.02173Q24.7683,6.81606,24.6484,6.61602Q24.5285,6.41599,24.399,6.22208Q24.2694,6.02817,24.1305,5.84086Q23.9915,5.65354,23.8436,5.47326Q23.6956,5.29299,23.539,5.12019Q23.3824,4.94739,23.2175,4.78249Q23.0526,4.61758,22.8798,4.46096Q22.707,4.3043499999999995,22.526699999999998,4.1564Q22.3465,4.00845,22.159100000000002,3.86953Q21.9718,3.7306,21.777900000000002,3.6010400000000002Q21.584,3.47147,21.384,3.3515800000000002Q21.1839,3.23168,20.9783,3.12175Q20.7726,3.01181,20.561799999999998,2.912102Q20.3509,2.812391,20.1355,2.723144Q19.92,2.633898,19.700499999999998,2.555331Q19.4809,2.476765,19.2577,2.409067Q19.0345,2.341369,18.8083,2.284703Q18.5821,2.228037,18.3534,2.18254Q18.1246,2.137042,17.893900000000002,2.102823Q17.6633,2.0686039,17.4312,2.0457451Q17.1991,2.0228863,16.96614,2.0114432Q16.73321,2,16.5,2Q16.26679,2,16.03386,2.0114432Q15.80093,2.0228863,15.56884,2.0457451Q15.33675,2.0686039,15.10606,2.102823Q14.87537,2.137042,14.64664,2.18254Q14.41791,2.228037,14.191690000000001,2.284703Q13.96547,2.341369,13.7423,2.409067Q13.51913,2.476765,13.29955,2.555331Q13.07997,2.633898,12.86451,2.723144Q12.649049999999999,2.812391,12.43823,2.912102Q12.227409999999999,3.01181,12.02173,3.12175Q11.81606,3.23168,11.616019999999999,3.3515800000000002Q11.41599,3.47147,11.22208,3.6010400000000002Q11.02817,3.7306,10.84086,3.86953Q10.65354,4.00845,10.47326,4.1564Q10.29299,4.3043499999999995,10.120190000000001,4.46096Q9.94739,4.61758,9.78249,4.78249Q9.61758,4.94739,9.46096,5.12019Q9.30435,5.29299,9.1564,5.47326Q9.00845,5.65354,8.86953,5.84086Q8.730599999999999,6.02817,8.60104,6.22208Q8.47147,6.41599,8.35158,6.61602Q8.23168,6.81606,8.12175,7.02173Q8.01181,7.22741,7.912102,7.43823Q7.812391,7.64905,7.723144,7.86451Q7.633898,8.07997,7.555331,8.29955Q7.476765,8.51913,7.409067,8.7423Q7.341369,8.96547,7.284703,9.191690000000001Q7.228037,9.41791,7.18254,9.64664Q7.137042,9.87537,7.102823,10.10606Q7.0686039,10.33675,7.0457451,10.56884Q7.0228863,10.80093,7.0114432,11.03386Q7,11.26679,7,11.5Q7,11.70966,7.00924994,11.91912Q7.0184999,12.1286,7.0369818,12.3374Q7.0554636,12.5463,7.0831414,12.7541Q7.110819,12.9619,7.147639,13.1683Q7.184459,13.3747,7.230349,13.5793Q7.276239,13.7839,7.33111,13.9863Q7.385982,14.1886,7.449727,14.3883Q7.513472,14.5881,7.585967,14.7848Q7.658463,14.9815,7.739567,15.1749Q7.820671,15.3682,7.910226,15.5578Q7.9997810000000005,15.7474,8.09761,15.9328Q8.19544,16.118299999999998,8.30136,16.2992Q8.40728,16.4801,8.52108,16.6562Q8.63487,16.8323,8.75633,17.0032Q8.87778,17.1741,9.00666,17.3395Q9.13554,17.5049,9.27158,17.6644Q9.407630000000001,17.823900000000002,9.55058,17.9773Q9.69354,18.1307,9.843119999999999,18.2776Q9.9927,18.4245,10.14861,18.5647Q10.30453,18.7049,10.46648,18.838Q10.62843,18.9712,10.79609,19.0971Q10.96376,19.223,11.13682,19.3413Q11.30987,19.4597,11.48798,19.5703Q11.66609,19.6809,11.84891,19.7836Q12.03173,19.8862,12.21889,19.9807Q12.40606,20.0752,12.59721,20.1613Q12.78837,20.2474,12.98313,20.3251Q13.177900000000001,20.4027,13.3759,20.4716Q13.5739,20.5406,13.77476,20.6007Q13.97561,20.6609,14.17892,20.7121Q14.38223,20.7633,14.5876,20.8055Q14.79297,20.8477,15,20.8808L15,28Q15,28.0737,15.00722,28.147Q15.01445,28.2204,15.02882,28.2926Q15.0432,28.3649,15.06459,28.4354Q15.08598,28.5059,15.11418,28.574Q15.14238,28.6421,15.17712,28.7071Q15.21185,28.7721,15.25279,28.8334Q15.29374,28.8946,15.34048,28.9516Q15.38723,29.0086,15.43934,29.0607Q15.49145,29.1128,15.54841,29.1595Q15.60537,29.2063,15.66664,29.2472Q15.72791,29.2881,15.7929,29.3229Q15.85789,29.3576,15.92597,29.3858Q15.99406,29.414,16.06457,29.4354Q16.135089999999998,29.4568,16.20736,29.4712Q16.27964,29.4856,16.35297,29.4928Q16.42631,29.5,16.5,29.5Q16.57369,29.5,16.64703,29.4928Q16.72036,29.4856,16.792630000000003,29.4712Q16.864910000000002,29.4568,16.93543,29.4354Q17.0059,29.414,17.073999999999998,29.3858Q17.1421,29.3576,17.2071,29.3229Q17.272100000000002,29.2881,17.333399999999997,29.2472Q17.3946,29.2063,17.4516,29.1595Q17.5086,29.1128,17.5607,29.0607Q17.6128,29.0086,17.6595,28.9516Q17.7063,28.8946,17.7472,28.8334Q17.7881,28.7721,17.8229,28.7071Q17.857599999999998,28.6421,17.8858,28.574Q17.914,28.5059,17.9354,28.4354Q17.9568,28.3649,17.9712,28.2926Q17.985599999999998,28.2204,17.992800000000003,28.147Q18,28.0737,18,28L18,20.8808ZM23,11.5Q23,8.80761,21.0962,6.90381Q19.1924,5,16.5,5Q13.80761,5,11.90381,6.90381Q10,8.80761,10,11.5Q10,14.1924,11.90381,16.0962Q13.80761,18,16.5,18Q19.1924,18,21.0962,16.0962Q23,14.1924,23,11.5ZM16.5,15Q16.67194,15,16.84306,14.9831Q17.014200000000002,14.9663,17.1828,14.9327Q17.3515,14.8992,17.516,14.8493Q17.680500000000002,14.7994,17.839399999999998,14.7336Q17.9982,14.6678,18.149900000000002,14.5867Q18.3015,14.5057,18.444499999999998,14.4101Q18.5875,14.3146,18.720399999999998,14.2055Q18.8533,14.0965,18.974899999999998,13.9749Q19.0965,13.8533,19.2055,13.7204Q19.3146,13.5875,19.4101,13.4445Q19.505699999999997,13.3015,19.5867,13.1499Q19.6678,12.9982,19.7336,12.8394Q19.7994,12.6805,19.8493,12.516Q19.8992,12.3515,19.9327,12.1828Q19.9663,12.0142,19.9831,11.84306Q20,11.67194,20,11.5Q20,11.32806,19.9831,11.15694Q19.9663,10.98582,19.9327,10.81718Q19.8992,10.64854,19.8493,10.484Q19.7994,10.31946,19.7336,10.16061Q19.6678,10.00175,19.5867,9.85011Q19.505699999999997,9.69847,19.4101,9.5555Q19.3146,9.41254,19.2055,9.279620000000001Q19.0965,9.146709999999999,18.974899999999998,9.02513Q18.8533,8.90354,18.720399999999998,8.79446Q18.5875,8.68538,18.444499999999998,8.58986Q18.3015,8.49433,18.149900000000002,8.41328Q17.9982,8.33222,17.839399999999998,8.26642Q17.680500000000002,8.20062,17.516,8.15071Q17.3515,8.1008,17.1828,8.06725Q17.014200000000002,8.03371,16.84306,8.01685Q16.67194,8,16.5,8Q16.32806,8,16.15694,8.01685Q15.98582,8.03371,15.81718,8.06725Q15.64854,8.1008,15.484,8.15071Q15.31946,8.20062,15.16061,8.26642Q15.00175,8.33222,14.85011,8.41328Q14.69847,8.49433,14.5555,8.58986Q14.41254,8.68538,14.279620000000001,8.79446Q14.146709999999999,8.90354,14.02513,9.02513Q13.90354,9.146709999999999,13.79446,9.279620000000001Q13.68538,9.41254,13.58986,9.5555Q13.49433,9.69847,13.41327,9.85011Q13.33222,10.00175,13.26642,10.16061Q13.20062,10.31946,13.15071,10.484Q13.1008,10.64854,13.06725,10.81718Q13.03371,10.98582,13.01685,11.15694Q13,11.32806,13,11.5Q13,11.67194,13.01685,11.84306Q13.03371,12.0142,13.06725,12.1828Q13.1008,12.3515,13.15071,12.516Q13.20062,12.6805,13.26642,12.8394Q13.33222,12.9982,13.41328,13.1499Q13.49433,13.3015,13.58986,13.4445Q13.68538,13.5875,13.79446,13.7204Q13.90354,13.8533,14.02513,13.9749Q14.146709999999999,14.0965,14.279620000000001,14.2055Q14.41254,14.3146,14.5555,14.4101Q14.69847,14.5057,14.85011,14.5867Q15.00175,14.6678,15.16061,14.7336Q15.31946,14.7994,15.484,14.8493Q15.64854,14.8992,15.81718,14.9327Q15.98582,14.9663,16.15694,14.9831Q16.32806,15,16.5,15Z" fill-rule="evenodd" fill="#000000" fill-opacity="1"/></g></g></svg>`;
  const fragment = document.createDocumentFragment();
  const div = document.createElement('div');
  div.innerHTML = svg;
  fragment.appendChild(div);
  const text = serializer.serializeToString(div.querySelector('svg'));
  return window.btoa(text);
}

export {
  base642File,
  dowloadFile,
  file2base64,
  link2file,
  readZIP,
  svg2imgSrc,
};
